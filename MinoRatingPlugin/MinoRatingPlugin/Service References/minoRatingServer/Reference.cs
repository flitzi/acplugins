//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MinoRatingPlugin.minoRatingServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PluginReaction", Namespace="http://schemas.datacontract.org/2004/07/MinoRating.Core.proxy")]
    [System.SerializableAttribute()]
    public partial class PluginReaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CarIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int DelayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MinoRatingPlugin.minoRatingServer.PluginReaction.ReactionType ReactionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SteamIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte CarId {
            get {
                return this.CarIdField;
            }
            set {
                if ((this.CarIdField.Equals(value) != true)) {
                    this.CarIdField = value;
                    this.RaisePropertyChanged("CarId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Delay {
            get {
                return this.DelayField;
            }
            set {
                if ((this.DelayField.Equals(value) != true)) {
                    this.DelayField = value;
                    this.RaisePropertyChanged("Delay");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MinoRatingPlugin.minoRatingServer.PluginReaction.ReactionType Reaction {
            get {
                return this.ReactionField;
            }
            set {
                if ((this.ReactionField.Equals(value) != true)) {
                    this.ReactionField = value;
                    this.RaisePropertyChanged("Reaction");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SteamId {
            get {
                return this.SteamIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SteamIdField, value) != true)) {
                    this.SteamIdField = value;
                    this.RaisePropertyChanged("SteamId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Text {
            get {
                return this.TextField;
            }
            set {
                if ((object.ReferenceEquals(this.TextField, value) != true)) {
                    this.TextField = value;
                    this.RaisePropertyChanged("Text");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
        [System.Runtime.Serialization.DataContractAttribute(Name="PluginReaction.ReactionType", Namespace="http://schemas.datacontract.org/2004/07/MinoRating.Core.proxy")]
        public enum ReactionType : int {
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            None = 0,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Whisper = 1,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Broadcast = 2,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Ballast = 3,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Pit = 4,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Kick = 5,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            Ban = 6,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            RestartSession = 7,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            NextSession = 8,
            
            [System.Runtime.Serialization.EnumMemberAttribute()]
            AdminCmd = 9,
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrackDefinition", Namespace="http://schemas.datacontract.org/2004/07/MinoRating.Core.proxy")]
    [System.SerializableAttribute()]
    public partial class TrackDefinition : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float LengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MinoRatingPlugin.minoRatingServer.TrackDefinitionLine[] LinesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float[] PitAreaRectangleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float[] PitExitRectangleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float[] SplitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TrackNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MinoRatingPlugin.minoRatingServer.TrackDefinitionLine[] Lines {
            get {
                return this.LinesField;
            }
            set {
                if ((object.ReferenceEquals(this.LinesField, value) != true)) {
                    this.LinesField = value;
                    this.RaisePropertyChanged("Lines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float[] PitAreaRectangle {
            get {
                return this.PitAreaRectangleField;
            }
            set {
                if ((object.ReferenceEquals(this.PitAreaRectangleField, value) != true)) {
                    this.PitAreaRectangleField = value;
                    this.RaisePropertyChanged("PitAreaRectangle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float[] PitExitRectangle {
            get {
                return this.PitExitRectangleField;
            }
            set {
                if ((object.ReferenceEquals(this.PitExitRectangleField, value) != true)) {
                    this.PitExitRectangleField = value;
                    this.RaisePropertyChanged("PitExitRectangle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float[] Splits {
            get {
                return this.SplitsField;
            }
            set {
                if ((object.ReferenceEquals(this.SplitsField, value) != true)) {
                    this.SplitsField = value;
                    this.RaisePropertyChanged("Splits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TrackName {
            get {
                return this.TrackNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TrackNameField, value) != true)) {
                    this.TrackNameField = value;
                    this.RaisePropertyChanged("TrackName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TrackDefinitionLine", Namespace="http://schemas.datacontract.org/2004/07/MinoRating.Core.proxy")]
    [System.SerializableAttribute()]
    public partial class TrackDefinitionLine : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FromSplineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FromXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float FromZField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long LineIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ToSplineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ToXField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float ToZField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FromSpline {
            get {
                return this.FromSplineField;
            }
            set {
                if ((this.FromSplineField.Equals(value) != true)) {
                    this.FromSplineField = value;
                    this.RaisePropertyChanged("FromSpline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FromX {
            get {
                return this.FromXField;
            }
            set {
                if ((this.FromXField.Equals(value) != true)) {
                    this.FromXField = value;
                    this.RaisePropertyChanged("FromX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float FromZ {
            get {
                return this.FromZField;
            }
            set {
                if ((this.FromZField.Equals(value) != true)) {
                    this.FromZField = value;
                    this.RaisePropertyChanged("FromZ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long LineId {
            get {
                return this.LineIdField;
            }
            set {
                if ((this.LineIdField.Equals(value) != true)) {
                    this.LineIdField = value;
                    this.RaisePropertyChanged("LineId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float ToSpline {
            get {
                return this.ToSplineField;
            }
            set {
                if ((this.ToSplineField.Equals(value) != true)) {
                    this.ToSplineField = value;
                    this.RaisePropertyChanged("ToSpline");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float ToX {
            get {
                return this.ToXField;
            }
            set {
                if ((this.ToXField.Equals(value) != true)) {
                    this.ToXField = value;
                    this.RaisePropertyChanged("ToX");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float ToZ {
            get {
                return this.ToZField;
            }
            set {
                if ((this.ToZField.Equals(value) != true)) {
                    this.ToZField = value;
                    this.RaisePropertyChanged("ToZ");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LeaderboardEntry", Namespace="http://schemas.datacontract.org/2004/07/MinoRating.Core.proxy")]
    [System.SerializableAttribute()]
    public partial class LeaderboardEntry : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CarIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DriverIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasFinishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LapsDrivenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RankField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint TimeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CarId {
            get {
                return this.CarIdField;
            }
            set {
                if ((this.CarIdField.Equals(value) != true)) {
                    this.CarIdField = value;
                    this.RaisePropertyChanged("CarId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DriverId {
            get {
                return this.DriverIdField;
            }
            set {
                if ((object.ReferenceEquals(this.DriverIdField, value) != true)) {
                    this.DriverIdField = value;
                    this.RaisePropertyChanged("DriverId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasFinished {
            get {
                return this.HasFinishedField;
            }
            set {
                if ((this.HasFinishedField.Equals(value) != true)) {
                    this.HasFinishedField = value;
                    this.RaisePropertyChanged("HasFinished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LapsDriven {
            get {
                return this.LapsDrivenField;
            }
            set {
                if ((this.LapsDrivenField.Equals(value) != true)) {
                    this.LapsDrivenField = value;
                    this.RaisePropertyChanged("LapsDriven");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rank {
            get {
                return this.RankField;
            }
            set {
                if ((this.RankField.Equals(value) != true)) {
                    this.RankField = value;
                    this.RaisePropertyChanged("Rank");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConsistencyReport", Namespace="http://schemas.datacontract.org/2004/07/MinoRating.Core.proxy")]
    [System.SerializableAttribute()]
    public partial class ConsistencyReport : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte CutsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsInlapField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LapStartField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint LaptimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte MaxGearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MaxVelocityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte MinGearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MinVelocityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte SplitResolutionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private uint[] SplitsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte carIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Cuts {
            get {
                return this.CutsField;
            }
            set {
                if ((this.CutsField.Equals(value) != true)) {
                    this.CutsField = value;
                    this.RaisePropertyChanged("Cuts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInlap {
            get {
                return this.IsInlapField;
            }
            set {
                if ((this.IsInlapField.Equals(value) != true)) {
                    this.IsInlapField = value;
                    this.RaisePropertyChanged("IsInlap");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LapStart {
            get {
                return this.LapStartField;
            }
            set {
                if ((this.LapStartField.Equals(value) != true)) {
                    this.LapStartField = value;
                    this.RaisePropertyChanged("LapStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint Laptime {
            get {
                return this.LaptimeField;
            }
            set {
                if ((this.LaptimeField.Equals(value) != true)) {
                    this.LaptimeField = value;
                    this.RaisePropertyChanged("Laptime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte MaxGear {
            get {
                return this.MaxGearField;
            }
            set {
                if ((this.MaxGearField.Equals(value) != true)) {
                    this.MaxGearField = value;
                    this.RaisePropertyChanged("MaxGear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MaxVelocity {
            get {
                return this.MaxVelocityField;
            }
            set {
                if ((this.MaxVelocityField.Equals(value) != true)) {
                    this.MaxVelocityField = value;
                    this.RaisePropertyChanged("MaxVelocity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte MinGear {
            get {
                return this.MinGearField;
            }
            set {
                if ((this.MinGearField.Equals(value) != true)) {
                    this.MinGearField = value;
                    this.RaisePropertyChanged("MinGear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MinVelocity {
            get {
                return this.MinVelocityField;
            }
            set {
                if ((this.MinVelocityField.Equals(value) != true)) {
                    this.MinVelocityField = value;
                    this.RaisePropertyChanged("MinVelocity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte SplitResolution {
            get {
                return this.SplitResolutionField;
            }
            set {
                if ((this.SplitResolutionField.Equals(value) != true)) {
                    this.SplitResolutionField = value;
                    this.RaisePropertyChanged("SplitResolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint[] Splits {
            get {
                return this.SplitsField;
            }
            set {
                if ((object.ReferenceEquals(this.SplitsField, value) != true)) {
                    this.SplitsField = value;
                    this.RaisePropertyChanged("Splits");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte carId {
            get {
                return this.carIdField;
            }
            set {
                if ((this.carIdField.Equals(value) != true)) {
                    this.carIdField = value;
                    this.RaisePropertyChanged("carId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MRDistanceHelper", Namespace="http://schemas.datacontract.org/2004/07/MinoRating.Core.proxy")]
    [System.SerializableAttribute()]
    public partial class MRDistanceHelper : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MetersAttackRangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MetersBlueflaggingField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MetersCombatRangeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float MetersDrivenField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OvertakesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float SplinePosCurrentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float SplinePosLastField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SplinePosTimeCurrentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SplinePosTimeLastField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MetersAttackRange {
            get {
                return this.MetersAttackRangeField;
            }
            set {
                if ((this.MetersAttackRangeField.Equals(value) != true)) {
                    this.MetersAttackRangeField = value;
                    this.RaisePropertyChanged("MetersAttackRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MetersBlueflagging {
            get {
                return this.MetersBlueflaggingField;
            }
            set {
                if ((this.MetersBlueflaggingField.Equals(value) != true)) {
                    this.MetersBlueflaggingField = value;
                    this.RaisePropertyChanged("MetersBlueflagging");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MetersCombatRange {
            get {
                return this.MetersCombatRangeField;
            }
            set {
                if ((this.MetersCombatRangeField.Equals(value) != true)) {
                    this.MetersCombatRangeField = value;
                    this.RaisePropertyChanged("MetersCombatRange");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float MetersDriven {
            get {
                return this.MetersDrivenField;
            }
            set {
                if ((this.MetersDrivenField.Equals(value) != true)) {
                    this.MetersDrivenField = value;
                    this.RaisePropertyChanged("MetersDriven");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Overtakes {
            get {
                return this.OvertakesField;
            }
            set {
                if ((this.OvertakesField.Equals(value) != true)) {
                    this.OvertakesField = value;
                    this.RaisePropertyChanged("Overtakes");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float SplinePosCurrent {
            get {
                return this.SplinePosCurrentField;
            }
            set {
                if ((this.SplinePosCurrentField.Equals(value) != true)) {
                    this.SplinePosCurrentField = value;
                    this.RaisePropertyChanged("SplinePosCurrent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float SplinePosLast {
            get {
                return this.SplinePosLastField;
            }
            set {
                if ((this.SplinePosLastField.Equals(value) != true)) {
                    this.SplinePosLastField = value;
                    this.RaisePropertyChanged("SplinePosLast");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SplinePosTimeCurrent {
            get {
                return this.SplinePosTimeCurrentField;
            }
            set {
                if ((this.SplinePosTimeCurrentField.Equals(value) != true)) {
                    this.SplinePosTimeCurrentField = value;
                    this.RaisePropertyChanged("SplinePosTimeCurrent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SplinePosTimeLast {
            get {
                return this.SplinePosTimeLastField;
            }
            set {
                if ((this.SplinePosTimeLastField.Equals(value) != true)) {
                    this.SplinePosTimeLastField = value;
                    this.RaisePropertyChanged("SplinePosTimeLast");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CarUpdateHistory", Namespace="http://schemas.datacontract.org/2004/07/MinoRating.Core.proxy")]
    [System.SerializableAttribute()]
    public partial class CarUpdateHistory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ushort EngineRPMField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte GearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float NormalizedSplinePositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float[] VelocityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float[] WorldPositionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Created {
            get {
                return this.CreatedField;
            }
            set {
                if ((this.CreatedField.Equals(value) != true)) {
                    this.CreatedField = value;
                    this.RaisePropertyChanged("Created");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ushort EngineRPM {
            get {
                return this.EngineRPMField;
            }
            set {
                if ((this.EngineRPMField.Equals(value) != true)) {
                    this.EngineRPMField = value;
                    this.RaisePropertyChanged("EngineRPM");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte Gear {
            get {
                return this.GearField;
            }
            set {
                if ((this.GearField.Equals(value) != true)) {
                    this.GearField = value;
                    this.RaisePropertyChanged("Gear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float NormalizedSplinePosition {
            get {
                return this.NormalizedSplinePositionField;
            }
            set {
                if ((this.NormalizedSplinePositionField.Equals(value) != true)) {
                    this.NormalizedSplinePositionField = value;
                    this.RaisePropertyChanged("NormalizedSplinePosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float[] Velocity {
            get {
                return this.VelocityField;
            }
            set {
                if ((object.ReferenceEquals(this.VelocityField, value) != true)) {
                    this.VelocityField = value;
                    this.RaisePropertyChanged("Velocity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float[] WorldPosition {
            get {
                return this.WorldPositionField;
            }
            set {
                if ((object.ReferenceEquals(this.WorldPositionField, value) != true)) {
                    this.WorldPositionField = value;
                    this.RaisePropertyChanged("WorldPosition");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PluginReactionCollection", Namespace="http://schemas.datacontract.org/2004/07/MinoRating.Core.proxy")]
    [System.SerializableAttribute()]
    public partial class PluginReactionCollection : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private MinoRatingPlugin.minoRatingServer.PluginReaction[] ReactionsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] Reactions {
            get {
                return this.ReactionsField;
            }
            set {
                if ((object.ReferenceEquals(this.ReactionsField, value) != true)) {
                    this.ReactionsField = value;
                    this.RaisePropertyChanged("Reactions");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="minoRatingServer.ILiveDataDump")]
    public interface ILiveDataDump {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/Alive", ReplyAction="http://tempuri.org/ILiveDataDump/AliveResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] Alive(System.Guid sessionId, System.DateTime created, string driversHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/Alive", ReplyAction="http://tempuri.org/ILiveDataDump/AliveResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> AliveAsync(System.Guid sessionId, System.DateTime created, string driversHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/NewSession", ReplyAction="http://tempuri.org/ILiveDataDump/NewSessionResponse")]
        System.Guid NewSession(
                    System.Guid lastId, 
                    string servername, 
                    string track, 
                    int sessionType, 
                    int laps, 
                    int waittime, 
                    int sessionDurationMinutes, 
                    int ambient, 
                    int road, 
                    int elapsedMs, 
                    string token, 
                    byte[] fingerprint, 
                    System.Version pluginVersion, 
                    int sessionCollisionsToKick, 
                    int sessionMassAccidentsToKick, 
                    int serverKickMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/NewSession", ReplyAction="http://tempuri.org/ILiveDataDump/NewSessionResponse")]
        System.Threading.Tasks.Task<System.Guid> NewSessionAsync(
                    System.Guid lastId, 
                    string servername, 
                    string track, 
                    int sessionType, 
                    int laps, 
                    int waittime, 
                    int sessionDurationMinutes, 
                    int ambient, 
                    int road, 
                    int elapsedMs, 
                    string token, 
                    byte[] fingerprint, 
                    System.Version pluginVersion, 
                    int sessionCollisionsToKick, 
                    int sessionMassAccidentsToKick, 
                    int serverKickMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/NewSessionWithConfig", ReplyAction="http://tempuri.org/ILiveDataDump/NewSessionWithConfigResponse")]
        System.Guid NewSessionWithConfig(
                    System.Guid lastId, 
                    string servername, 
                    string track, 
                    int sessionType, 
                    int laps, 
                    int waittime, 
                    int sessionDurationMinutes, 
                    int ambient, 
                    int road, 
                    int elapsedMs, 
                    string token, 
                    byte[] fingerprint, 
                    System.Version pluginVersion, 
                    int sessionCollisionsToKick, 
                    int sessionMassAccidentsToKick, 
                    int serverKickMode, 
                    string server_config_ini);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/NewSessionWithConfig", ReplyAction="http://tempuri.org/ILiveDataDump/NewSessionWithConfigResponse")]
        System.Threading.Tasks.Task<System.Guid> NewSessionWithConfigAsync(
                    System.Guid lastId, 
                    string servername, 
                    string track, 
                    int sessionType, 
                    int laps, 
                    int waittime, 
                    int sessionDurationMinutes, 
                    int ambient, 
                    int road, 
                    int elapsedMs, 
                    string token, 
                    byte[] fingerprint, 
                    System.Version pluginVersion, 
                    int sessionCollisionsToKick, 
                    int sessionMassAccidentsToKick, 
                    int serverKickMode, 
                    string server_config_ini);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/GetTrackDefinition", ReplyAction="http://tempuri.org/ILiveDataDump/GetTrackDefinitionResponse")]
        MinoRatingPlugin.minoRatingServer.TrackDefinition GetTrackDefinition(System.Guid lastId, System.DateTime created);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/GetTrackDefinition", ReplyAction="http://tempuri.org/ILiveDataDump/GetTrackDefinitionResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.TrackDefinition> GetTrackDefinitionAsync(System.Guid lastId, System.DateTime created);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/GetTrackDefinitionByName", ReplyAction="http://tempuri.org/ILiveDataDump/GetTrackDefinitionByNameResponse")]
        MinoRatingPlugin.minoRatingServer.TrackDefinition GetTrackDefinitionByName(string trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/GetTrackDefinitionByName", ReplyAction="http://tempuri.org/ILiveDataDump/GetTrackDefinitionByNameResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.TrackDefinition> GetTrackDefinitionByNameAsync(string trackId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/EndSession", ReplyAction="http://tempuri.org/ILiveDataDump/EndSessionResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] EndSession(System.Guid lastId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/EndSession", ReplyAction="http://tempuri.org/ILiveDataDump/EndSessionResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> EndSessionAsync(System.Guid lastId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/LapCompleted", ReplyAction="http://tempuri.org/ILiveDataDump/LapCompletedResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] LapCompleted(System.Guid sessionId, System.DateTime created, int car, string driver, uint laptime, int cuts, float grip, MinoRatingPlugin.minoRatingServer.LeaderboardEntry[] leaderboard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/LapCompleted", ReplyAction="http://tempuri.org/ILiveDataDump/LapCompletedResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> LapCompletedAsync(System.Guid sessionId, System.DateTime created, int car, string driver, uint laptime, int cuts, float grip, MinoRatingPlugin.minoRatingServer.LeaderboardEntry[] leaderboard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/LapCompletedConsistencySplits", ReplyAction="http://tempuri.org/ILiveDataDump/LapCompletedConsistencySplitsResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] LapCompletedConsistencySplits(System.Guid sessionId, System.DateTime created, int car, MinoRatingPlugin.minoRatingServer.ConsistencyReport consistencyReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/LapCompletedConsistencySplits", ReplyAction="http://tempuri.org/ILiveDataDump/LapCompletedConsistencySplitsResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> LapCompletedConsistencySplitsAsync(System.Guid sessionId, System.DateTime created, int car, MinoRatingPlugin.minoRatingServer.ConsistencyReport consistencyReport);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/DistanceDriven", ReplyAction="http://tempuri.org/ILiveDataDump/DistanceDrivenResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] DistanceDriven(System.Guid sessionId, int car, [System.ServiceModel.MessageParameterAttribute(Name="distanceDriven")] MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceDriven1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/DistanceDriven", ReplyAction="http://tempuri.org/ILiveDataDump/DistanceDrivenResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> DistanceDrivenAsync(System.Guid sessionId, int car, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceDriven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/Collision", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] Collision(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float x, float z, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, int bagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/Collision", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> CollisionAsync(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float x, float z, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, int bagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionV2", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionV2Response")]
        MinoRatingPlugin.minoRatingServer.PluginReactionCollection CollisionV2(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float x, float z, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, int bagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionV2", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionV2Response")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReactionCollection> CollisionV2Async(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float x, float z, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, int bagId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionV21", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionV21Response")]
        MinoRatingPlugin.minoRatingServer.PluginReactionCollection CollisionV21(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionV21", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionV21Response")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReactionCollection> CollisionV21Async(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionV22", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionV22Response")]
        MinoRatingPlugin.minoRatingServer.PluginReactionCollection CollisionV22(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float worldX, float worldZ, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionV22", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionV22Response")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReactionCollection> CollisionV22Async(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float worldX, float worldZ, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionV24", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionV24Response")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] CollisionV24(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float worldX, float worldZ, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionV24", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionV24Response")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> CollisionV24Async(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float worldX, float worldZ, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionTreeEnded", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionTreeEndedResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] CollisionTreeEnded(System.Guid sessionId, int car, int otherCar, int count, System.DateTime started, System.DateTime ended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionTreeEnded", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionTreeEndedResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> CollisionTreeEndedAsync(System.Guid sessionId, int car, int otherCar, int count, System.DateTime started, System.DateTime ended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionTreeEndedV2", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionTreeEndedV2Response")]
        MinoRatingPlugin.minoRatingServer.PluginReactionCollection CollisionTreeEndedV2(System.Guid sessionId, int car, int otherCar, int count, System.DateTime started, System.DateTime ended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CollisionTreeEndedV2", ReplyAction="http://tempuri.org/ILiveDataDump/CollisionTreeEndedV2Response")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReactionCollection> CollisionTreeEndedV2Async(System.Guid sessionId, int car, int otherCar, int count, System.DateTime started, System.DateTime ended);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/RandomCarInfo", ReplyAction="http://tempuri.org/ILiveDataDump/RandomCarInfoResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] RandomCarInfo(System.Guid sessionId, int carId, string car, string name, string driverId, bool isConnected, int sessionTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/RandomCarInfo", ReplyAction="http://tempuri.org/ILiveDataDump/RandomCarInfoResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> RandomCarInfoAsync(System.Guid sessionId, int carId, string car, string name, string driverId, bool isConnected, int sessionTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/GetVersion", ReplyAction="http://tempuri.org/ILiveDataDump/GetVersionResponse")]
        System.Version GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/GetVersion", ReplyAction="http://tempuri.org/ILiveDataDump/GetVersionResponse")]
        System.Threading.Tasks.Task<System.Version> GetVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/RequestDriverRating", ReplyAction="http://tempuri.org/ILiveDataDump/RequestDriverRatingResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] RequestDriverRating(System.Guid sessionId, int car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/RequestDriverRating", ReplyAction="http://tempuri.org/ILiveDataDump/RequestDriverRatingResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> RequestDriverRatingAsync(System.Guid sessionId, int car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/RequestMRCommand", ReplyAction="http://tempuri.org/ILiveDataDump/RequestMRCommandResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] RequestMRCommand(System.Guid sessionId, int car, string[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/RequestMRCommand", ReplyAction="http://tempuri.org/ILiveDataDump/RequestMRCommandResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> RequestMRCommandAsync(System.Guid sessionId, int car, string[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/RequestMRCommandAdminInfo", ReplyAction="http://tempuri.org/ILiveDataDump/RequestMRCommandAdminInfoResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] RequestMRCommandAdminInfo(System.Guid sessionId, int car, bool isAdmin, string[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/RequestMRCommandAdminInfo", ReplyAction="http://tempuri.org/ILiveDataDump/RequestMRCommandAdminInfoResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> RequestMRCommandAdminInfoAsync(System.Guid sessionId, int car, bool isAdmin, string[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/RequestDriverLoaded", ReplyAction="http://tempuri.org/ILiveDataDump/RequestDriverLoadedResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] RequestDriverLoaded(System.Guid sessionId, int car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/RequestDriverLoaded", ReplyAction="http://tempuri.org/ILiveDataDump/RequestDriverLoadedResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> RequestDriverLoadedAsync(System.Guid sessionId, int car);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/GetPendingActions", ReplyAction="http://tempuri.org/ILiveDataDump/GetPendingActionsResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] GetPendingActions(System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/GetPendingActions", ReplyAction="http://tempuri.org/ILiveDataDump/GetPendingActionsResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> GetPendingActionsAsync(System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/DriverBackToPits", ReplyAction="http://tempuri.org/ILiveDataDump/DriverBackToPitsResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] DriverBackToPits(System.Guid sessionId, System.DateTime created, int carId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/DriverBackToPits", ReplyAction="http://tempuri.org/ILiveDataDump/DriverBackToPitsResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> DriverBackToPitsAsync(System.Guid sessionId, System.DateTime created, int carId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/GetAuthData", ReplyAction="http://tempuri.org/ILiveDataDump/GetAuthDataResponse")]
        System.Collections.Generic.Dictionary<string, string> GetAuthData(string token, System.DateTime currentPluginTime, System.DateTime lastPluginUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/GetAuthData", ReplyAction="http://tempuri.org/ILiveDataDump/GetAuthDataResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetAuthDataAsync(string token, System.DateTime currentPluginTime, System.DateTime lastPluginUpdate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/LineCrossed", ReplyAction="http://tempuri.org/ILiveDataDump/LineCrossedResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] LineCrossed(System.Guid sessionId, int car, long lineId, float speed, float acceleration, float minVelocity10s, float maxVelocity10s, float distanceToNextCar, float[] worldpositions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/LineCrossed", ReplyAction="http://tempuri.org/ILiveDataDump/LineCrossedResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> LineCrossedAsync(System.Guid sessionId, int car, long lineId, float speed, float acceleration, float minVelocity10s, float maxVelocity10s, float distanceToNextCar, float[] worldpositions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CreateTrackLine", ReplyAction="http://tempuri.org/ILiveDataDump/CreateTrackLineResponse")]
        MinoRatingPlugin.minoRatingServer.PluginReaction[] CreateTrackLine(System.Guid sessionId, byte carId, float fromSpline, float toSpline, float x1, float y1, float x2, float y2, string hint, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/CreateTrackLine", ReplyAction="http://tempuri.org/ILiveDataDump/CreateTrackLineResponse")]
        System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> CreateTrackLineAsync(System.Guid sessionId, byte carId, float fromSpline, float toSpline, float x1, float y1, float x2, float y2, string hint, int type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/UpdateTrackDefinition", ReplyAction="http://tempuri.org/ILiveDataDump/UpdateTrackDefinitionResponse")]
        string UpdateTrackDefinition(string trackid, float trackLengthMeters, string secret);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILiveDataDump/UpdateTrackDefinition", ReplyAction="http://tempuri.org/ILiveDataDump/UpdateTrackDefinitionResponse")]
        System.Threading.Tasks.Task<string> UpdateTrackDefinitionAsync(string trackid, float trackLengthMeters, string secret);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILiveDataDumpChannel : MinoRatingPlugin.minoRatingServer.ILiveDataDump, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LiveDataDumpClient : System.ServiceModel.ClientBase<MinoRatingPlugin.minoRatingServer.ILiveDataDump>, MinoRatingPlugin.minoRatingServer.ILiveDataDump {
        
        public LiveDataDumpClient() {
        }
        
        public LiveDataDumpClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LiveDataDumpClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveDataDumpClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LiveDataDumpClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] Alive(System.Guid sessionId, System.DateTime created, string driversHash) {
            return base.Channel.Alive(sessionId, created, driversHash);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> AliveAsync(System.Guid sessionId, System.DateTime created, string driversHash) {
            return base.Channel.AliveAsync(sessionId, created, driversHash);
        }
        
        public System.Guid NewSession(
                    System.Guid lastId, 
                    string servername, 
                    string track, 
                    int sessionType, 
                    int laps, 
                    int waittime, 
                    int sessionDurationMinutes, 
                    int ambient, 
                    int road, 
                    int elapsedMs, 
                    string token, 
                    byte[] fingerprint, 
                    System.Version pluginVersion, 
                    int sessionCollisionsToKick, 
                    int sessionMassAccidentsToKick, 
                    int serverKickMode) {
            return base.Channel.NewSession(lastId, servername, track, sessionType, laps, waittime, sessionDurationMinutes, ambient, road, elapsedMs, token, fingerprint, pluginVersion, sessionCollisionsToKick, sessionMassAccidentsToKick, serverKickMode);
        }
        
        public System.Threading.Tasks.Task<System.Guid> NewSessionAsync(
                    System.Guid lastId, 
                    string servername, 
                    string track, 
                    int sessionType, 
                    int laps, 
                    int waittime, 
                    int sessionDurationMinutes, 
                    int ambient, 
                    int road, 
                    int elapsedMs, 
                    string token, 
                    byte[] fingerprint, 
                    System.Version pluginVersion, 
                    int sessionCollisionsToKick, 
                    int sessionMassAccidentsToKick, 
                    int serverKickMode) {
            return base.Channel.NewSessionAsync(lastId, servername, track, sessionType, laps, waittime, sessionDurationMinutes, ambient, road, elapsedMs, token, fingerprint, pluginVersion, sessionCollisionsToKick, sessionMassAccidentsToKick, serverKickMode);
        }
        
        public System.Guid NewSessionWithConfig(
                    System.Guid lastId, 
                    string servername, 
                    string track, 
                    int sessionType, 
                    int laps, 
                    int waittime, 
                    int sessionDurationMinutes, 
                    int ambient, 
                    int road, 
                    int elapsedMs, 
                    string token, 
                    byte[] fingerprint, 
                    System.Version pluginVersion, 
                    int sessionCollisionsToKick, 
                    int sessionMassAccidentsToKick, 
                    int serverKickMode, 
                    string server_config_ini) {
            return base.Channel.NewSessionWithConfig(lastId, servername, track, sessionType, laps, waittime, sessionDurationMinutes, ambient, road, elapsedMs, token, fingerprint, pluginVersion, sessionCollisionsToKick, sessionMassAccidentsToKick, serverKickMode, server_config_ini);
        }
        
        public System.Threading.Tasks.Task<System.Guid> NewSessionWithConfigAsync(
                    System.Guid lastId, 
                    string servername, 
                    string track, 
                    int sessionType, 
                    int laps, 
                    int waittime, 
                    int sessionDurationMinutes, 
                    int ambient, 
                    int road, 
                    int elapsedMs, 
                    string token, 
                    byte[] fingerprint, 
                    System.Version pluginVersion, 
                    int sessionCollisionsToKick, 
                    int sessionMassAccidentsToKick, 
                    int serverKickMode, 
                    string server_config_ini) {
            return base.Channel.NewSessionWithConfigAsync(lastId, servername, track, sessionType, laps, waittime, sessionDurationMinutes, ambient, road, elapsedMs, token, fingerprint, pluginVersion, sessionCollisionsToKick, sessionMassAccidentsToKick, serverKickMode, server_config_ini);
        }
        
        public MinoRatingPlugin.minoRatingServer.TrackDefinition GetTrackDefinition(System.Guid lastId, System.DateTime created) {
            return base.Channel.GetTrackDefinition(lastId, created);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.TrackDefinition> GetTrackDefinitionAsync(System.Guid lastId, System.DateTime created) {
            return base.Channel.GetTrackDefinitionAsync(lastId, created);
        }
        
        public MinoRatingPlugin.minoRatingServer.TrackDefinition GetTrackDefinitionByName(string trackId) {
            return base.Channel.GetTrackDefinitionByName(trackId);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.TrackDefinition> GetTrackDefinitionByNameAsync(string trackId) {
            return base.Channel.GetTrackDefinitionByNameAsync(trackId);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] EndSession(System.Guid lastId) {
            return base.Channel.EndSession(lastId);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> EndSessionAsync(System.Guid lastId) {
            return base.Channel.EndSessionAsync(lastId);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] LapCompleted(System.Guid sessionId, System.DateTime created, int car, string driver, uint laptime, int cuts, float grip, MinoRatingPlugin.minoRatingServer.LeaderboardEntry[] leaderboard) {
            return base.Channel.LapCompleted(sessionId, created, car, driver, laptime, cuts, grip, leaderboard);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> LapCompletedAsync(System.Guid sessionId, System.DateTime created, int car, string driver, uint laptime, int cuts, float grip, MinoRatingPlugin.minoRatingServer.LeaderboardEntry[] leaderboard) {
            return base.Channel.LapCompletedAsync(sessionId, created, car, driver, laptime, cuts, grip, leaderboard);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] LapCompletedConsistencySplits(System.Guid sessionId, System.DateTime created, int car, MinoRatingPlugin.minoRatingServer.ConsistencyReport consistencyReport) {
            return base.Channel.LapCompletedConsistencySplits(sessionId, created, car, consistencyReport);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> LapCompletedConsistencySplitsAsync(System.Guid sessionId, System.DateTime created, int car, MinoRatingPlugin.minoRatingServer.ConsistencyReport consistencyReport) {
            return base.Channel.LapCompletedConsistencySplitsAsync(sessionId, created, car, consistencyReport);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] DistanceDriven(System.Guid sessionId, int car, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceDriven1) {
            return base.Channel.DistanceDriven(sessionId, car, distanceDriven1);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> DistanceDrivenAsync(System.Guid sessionId, int car, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceDriven) {
            return base.Channel.DistanceDrivenAsync(sessionId, car, distanceDriven);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] Collision(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float x, float z, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, int bagId) {
            return base.Channel.Collision(sessionId, created, car, otherCar, speed, splinepos, relativeX, relativeZ, x, z, historyCar, historyOtherCar, bagId);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> CollisionAsync(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float x, float z, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, int bagId) {
            return base.Channel.CollisionAsync(sessionId, created, car, otherCar, speed, splinepos, relativeX, relativeZ, x, z, historyCar, historyOtherCar, bagId);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReactionCollection CollisionV2(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float x, float z, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, int bagId) {
            return base.Channel.CollisionV2(sessionId, created, car, otherCar, speed, splinepos, relativeX, relativeZ, x, z, historyCar, historyOtherCar, bagId);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReactionCollection> CollisionV2Async(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float x, float z, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, int bagId) {
            return base.Channel.CollisionV2Async(sessionId, created, car, otherCar, speed, splinepos, relativeX, relativeZ, x, z, historyCar, historyOtherCar, bagId);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReactionCollection CollisionV21(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar) {
            return base.Channel.CollisionV21(sessionId, created, car, otherCar, speed, splinepos, historyCar, historyOtherCar, distanceCar);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReactionCollection> CollisionV21Async(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar) {
            return base.Channel.CollisionV21Async(sessionId, created, car, otherCar, speed, splinepos, historyCar, historyOtherCar, distanceCar);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReactionCollection CollisionV22(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float worldX, float worldZ, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar) {
            return base.Channel.CollisionV22(sessionId, created, car, otherCar, speed, splinepos, relativeX, relativeZ, worldX, worldZ, historyCar, historyOtherCar, distanceCar);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReactionCollection> CollisionV22Async(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float worldX, float worldZ, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar) {
            return base.Channel.CollisionV22Async(sessionId, created, car, otherCar, speed, splinepos, relativeX, relativeZ, worldX, worldZ, historyCar, historyOtherCar, distanceCar);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] CollisionV24(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float worldX, float worldZ, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar) {
            return base.Channel.CollisionV24(sessionId, created, car, otherCar, speed, splinepos, relativeX, relativeZ, worldX, worldZ, historyCar, historyOtherCar, distanceCar);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> CollisionV24Async(System.Guid sessionId, System.DateTime created, int car, int otherCar, float speed, float splinepos, float relativeX, float relativeZ, float worldX, float worldZ, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyCar, MinoRatingPlugin.minoRatingServer.CarUpdateHistory[] historyOtherCar, MinoRatingPlugin.minoRatingServer.MRDistanceHelper distanceCar) {
            return base.Channel.CollisionV24Async(sessionId, created, car, otherCar, speed, splinepos, relativeX, relativeZ, worldX, worldZ, historyCar, historyOtherCar, distanceCar);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] CollisionTreeEnded(System.Guid sessionId, int car, int otherCar, int count, System.DateTime started, System.DateTime ended) {
            return base.Channel.CollisionTreeEnded(sessionId, car, otherCar, count, started, ended);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> CollisionTreeEndedAsync(System.Guid sessionId, int car, int otherCar, int count, System.DateTime started, System.DateTime ended) {
            return base.Channel.CollisionTreeEndedAsync(sessionId, car, otherCar, count, started, ended);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReactionCollection CollisionTreeEndedV2(System.Guid sessionId, int car, int otherCar, int count, System.DateTime started, System.DateTime ended) {
            return base.Channel.CollisionTreeEndedV2(sessionId, car, otherCar, count, started, ended);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReactionCollection> CollisionTreeEndedV2Async(System.Guid sessionId, int car, int otherCar, int count, System.DateTime started, System.DateTime ended) {
            return base.Channel.CollisionTreeEndedV2Async(sessionId, car, otherCar, count, started, ended);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] RandomCarInfo(System.Guid sessionId, int carId, string car, string name, string driverId, bool isConnected, int sessionTime) {
            return base.Channel.RandomCarInfo(sessionId, carId, car, name, driverId, isConnected, sessionTime);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> RandomCarInfoAsync(System.Guid sessionId, int carId, string car, string name, string driverId, bool isConnected, int sessionTime) {
            return base.Channel.RandomCarInfoAsync(sessionId, carId, car, name, driverId, isConnected, sessionTime);
        }
        
        public System.Version GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public System.Threading.Tasks.Task<System.Version> GetVersionAsync() {
            return base.Channel.GetVersionAsync();
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] RequestDriverRating(System.Guid sessionId, int car) {
            return base.Channel.RequestDriverRating(sessionId, car);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> RequestDriverRatingAsync(System.Guid sessionId, int car) {
            return base.Channel.RequestDriverRatingAsync(sessionId, car);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] RequestMRCommand(System.Guid sessionId, int car, string[] parameters) {
            return base.Channel.RequestMRCommand(sessionId, car, parameters);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> RequestMRCommandAsync(System.Guid sessionId, int car, string[] parameters) {
            return base.Channel.RequestMRCommandAsync(sessionId, car, parameters);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] RequestMRCommandAdminInfo(System.Guid sessionId, int car, bool isAdmin, string[] parameters) {
            return base.Channel.RequestMRCommandAdminInfo(sessionId, car, isAdmin, parameters);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> RequestMRCommandAdminInfoAsync(System.Guid sessionId, int car, bool isAdmin, string[] parameters) {
            return base.Channel.RequestMRCommandAdminInfoAsync(sessionId, car, isAdmin, parameters);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] RequestDriverLoaded(System.Guid sessionId, int car) {
            return base.Channel.RequestDriverLoaded(sessionId, car);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> RequestDriverLoadedAsync(System.Guid sessionId, int car) {
            return base.Channel.RequestDriverLoadedAsync(sessionId, car);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] GetPendingActions(System.Guid sessionId) {
            return base.Channel.GetPendingActions(sessionId);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> GetPendingActionsAsync(System.Guid sessionId) {
            return base.Channel.GetPendingActionsAsync(sessionId);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] DriverBackToPits(System.Guid sessionId, System.DateTime created, int carId) {
            return base.Channel.DriverBackToPits(sessionId, created, carId);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> DriverBackToPitsAsync(System.Guid sessionId, System.DateTime created, int carId) {
            return base.Channel.DriverBackToPitsAsync(sessionId, created, carId);
        }
        
        public System.Collections.Generic.Dictionary<string, string> GetAuthData(string token, System.DateTime currentPluginTime, System.DateTime lastPluginUpdate) {
            return base.Channel.GetAuthData(token, currentPluginTime, lastPluginUpdate);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, string>> GetAuthDataAsync(string token, System.DateTime currentPluginTime, System.DateTime lastPluginUpdate) {
            return base.Channel.GetAuthDataAsync(token, currentPluginTime, lastPluginUpdate);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] LineCrossed(System.Guid sessionId, int car, long lineId, float speed, float acceleration, float minVelocity10s, float maxVelocity10s, float distanceToNextCar, float[] worldpositions) {
            return base.Channel.LineCrossed(sessionId, car, lineId, speed, acceleration, minVelocity10s, maxVelocity10s, distanceToNextCar, worldpositions);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> LineCrossedAsync(System.Guid sessionId, int car, long lineId, float speed, float acceleration, float minVelocity10s, float maxVelocity10s, float distanceToNextCar, float[] worldpositions) {
            return base.Channel.LineCrossedAsync(sessionId, car, lineId, speed, acceleration, minVelocity10s, maxVelocity10s, distanceToNextCar, worldpositions);
        }
        
        public MinoRatingPlugin.minoRatingServer.PluginReaction[] CreateTrackLine(System.Guid sessionId, byte carId, float fromSpline, float toSpline, float x1, float y1, float x2, float y2, string hint, int type) {
            return base.Channel.CreateTrackLine(sessionId, carId, fromSpline, toSpline, x1, y1, x2, y2, hint, type);
        }
        
        public System.Threading.Tasks.Task<MinoRatingPlugin.minoRatingServer.PluginReaction[]> CreateTrackLineAsync(System.Guid sessionId, byte carId, float fromSpline, float toSpline, float x1, float y1, float x2, float y2, string hint, int type) {
            return base.Channel.CreateTrackLineAsync(sessionId, carId, fromSpline, toSpline, x1, y1, x2, y2, hint, type);
        }
        
        public string UpdateTrackDefinition(string trackid, float trackLengthMeters, string secret) {
            return base.Channel.UpdateTrackDefinition(trackid, trackLengthMeters, secret);
        }
        
        public System.Threading.Tasks.Task<string> UpdateTrackDefinitionAsync(string trackid, float trackLengthMeters, string secret) {
            return base.Channel.UpdateTrackDefinitionAsync(trackid, trackLengthMeters, secret);
        }
    }
}
